name: CMake Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    # Run on Ubuntu (which will have apt-get for installing valgrind)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install uv (Python package manager)
      run: |
        pip install uv
        uv --version

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind libreadline-dev

    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Debug

    - name: Build
      run: cmake --build build

    - name: Setup Python virtual environment and build kernel
      run: |
        cd build
        # Print CMake variables to help debugging
        echo "Current directory: $(pwd)"
        echo "CMake binary dir: $(cmake -LA . | grep CMAKE_BINARY_DIR)"
        echo "CMake current binary dir: $(cmake -LA . | grep CMAKE_CURRENT_BINARY_DIR)"
        
        # Attempt to build the venv target
        cmake --build . --target setup_venv
        
        # Debug: List files to find where venv was created
        echo "Listing build directory contents:"
        find . -name ".venv" -type d
        find . -path "*/.venv/bin/python" 2>/dev/null || echo "Python executable not found in .venv/bin"
        find . -name "python" 2>/dev/null | grep -i venv
        
        # Continue with other targets
        cmake --build . --target jupyter_kernel
        cmake --build . --target install_kernel

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Filter out the JupyterKernel.NadaLispKernel if it's still causing issues
      run: ctest --output-on-failure -E JupyterKernel.NadaLispKernel

    - name: Test Jupyter kernel separately
      working-directory: ${{github.workspace}}/build
      # Try multiple possible locations for the venv
      run: |
        # Try to find python executable in virtual environment
        PYTHON_EXEC=$(find . -path "*/.venv/bin/python" 2>/dev/null | head -1)
        
        if [ -n "$PYTHON_EXEC" ]; then
          echo "Found Python at: $PYTHON_EXEC"
          $PYTHON_EXEC -c "import sys; print('Python path:', sys.path)"
          $PYTHON_EXEC -c "import jupyter_client; print('Kernel specs:', jupyter_client.kernelspec.find_kernel_specs())"
        else
          echo "Python executable not found in virtual environment"
          echo "Listing all Python executables:"
          find . -name "python" | grep -v "/__pycache__/"
          exit 1
        fi
